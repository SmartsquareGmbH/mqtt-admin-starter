buildscript {
    ext {
        javaVersion = JavaVersion.VERSION_1_8
        gradleVersion = "7.1.1"

        junitVersion = "5.7.2"
        kotlinVersion = "1.5.20"
        detektVersion = "1.17.1"
        ktlintVersion = "10.1.0"
        jacksonVersion = "2.12.4"
        springBootVersion = "2.5.2"
        testcontainersVersion = "1.15.3"
        kluentVersion = "1.67"
        dokkaVersion = "1.5.0"
        dependencyManagementVersion = "1.0.11.RELEASE"
        gradleNexusVersion = "1.1.0"
        gradleVersionsPluginVersion = "0.39.0"
    }

    repositories {
        gradlePluginPortal()
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id "signing"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.jetbrains.dokka" version "$dokkaVersion"
    id "io.gitlab.arturbosch.detekt" version "$detektVersion"
    id "org.jlleitschuh.gradle.ktlint" version "$ktlintVersion"
    id "io.spring.dependency-management" version "$dependencyManagementVersion"
    id "io.github.gradle-nexus.publish-plugin" version "$gradleNexusVersion"
    id "com.github.ben-manes.versions" version "$gradleVersionsPluginVersion"
}

group = "de.smartsquare"
version = System.getenv("GITHUB_VERSION") ?: "1.0.0-SNAPSHOT"
description = "Spring Boot Starter providing admin functionality for brokers."

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    implementation "org.springframework.boot:spring-boot:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    kapt "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"

    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
}

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    withJavadocJar()
    withSourcesJar()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = javaVersion.toString()
        allWarningsAsErrors = true
    }
}

kapt {
    arguments {
        arg(
                "org.springframework.boot.configurationprocessor.additionalMetadataLocations",
                "$projectDir/src/main/resources"
        )
    }
}

dokkaHtml {
    outputDirectory.set(javadoc.destinationDir)
    dokkaSourceSets {
        named("main") {
            jdkVersion.set(javaVersion)
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(new URL("https://github.com/SmartsquareGmbH/mqtt-admin-starter/blob/master/src/main/kotlin"))
                remoteLineSuffix.set("#L")
            }
        }
    }
}

tasks.withType(Javadoc).all {
    it.dependsOn dokkaHtml
}

detekt {
    config = files("${project.rootDir}/detekt.yml")

    buildUponDefaultConfig = true
}

ktlint {
    outputToConsole = true
}

test {
    useJUnitPlatform {
        excludeEngines "junit-vintage"
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "mqtt-admin-starter"

            from components.java

            pom {
                name = "Mqtt-Admin-Starter"
                description = "Spring Boot Starter providing admin functionality for brokers."
                url = "https://github.com/SmartsquareGmbH/mqtt-admin-starter"

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://opensource.org/licenses/MIT"
                    }
                }
                developers {
                    developer {
                        id = "lschuer"
                        name = "Leonie SchÃ¼rstedt"
                        email = "schuerstedt@smartsquare.de"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/SmartsquareGmbH/mqtt-admin-starter.git"
                    developerConnection = "scm:git:ssh://github.com/SmartsquareGmbH/mqtt-admin-starter.git"
                    url = "https://github.com/SmartsquareGmbH/mqtt-admin-starter"
                }
                organization {
                    name = "Smartsquare GmbH"
                    url = "https://github.com/SmartsquareGmbH"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/SmartsquareGmbH/mqtt-admin-starter/issues"
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.findProperty("gpr.ossrhUser") ?: System.getenv("OSSRHUSER")
            password = project.findProperty("gpr.ossrhPassword") ?: System.getenv("OSSRHPASSWORD")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey") ?: System.getenv("GPG_PRIVATE_KEY")
    def signingPassword = findProperty("signingPassword") ?: System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

static def isNonStable(String version) {
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/

    return !stableKeyword && !(version ==~ regex)
}

wrapper {
    gradleVersion = project.ext.gradleVersion
}
